	protected void setupGenericFeatureProcessors() {
		processors = new TreeMap<String, MaryFeatureProcessor>();

		MaryGenericFeatureProcessors.TargetElementNavigator segment = new MaryGenericFeatureProcessors.SegmentNavigator();
		MaryGenericFeatureProcessors.TargetElementNavigator prevSegment = new MaryGenericFeatureProcessors.PrevSegmentNavigator();
		MaryGenericFeatureProcessors.TargetElementNavigator nextSegment = new MaryGenericFeatureProcessors.NextSegmentNavigator();
		MaryGenericFeatureProcessors.TargetElementNavigator syllable = new MaryGenericFeatureProcessors.SyllableNavigator();
		MaryGenericFeatureProcessors.TargetElementNavigator prevSyllable = new MaryGenericFeatureProcessors.PrevSyllableNavigator();
		MaryGenericFeatureProcessors.TargetElementNavigator nextSyllable = new MaryGenericFeatureProcessors.NextSyllableNavigator();
		MaryGenericFeatureProcessors.TargetElementNavigator nextNextSyllable = new MaryGenericFeatureProcessors.NextNextSyllableNavigator();
		MaryGenericFeatureProcessors.TargetElementNavigator lastWord = new MaryGenericFeatureProcessors.LastWordInSentenceNavigator();

		addFeatureProcessor(new MaryGenericFeatureProcessors.Edge());
		addFeatureProcessor(new MaryGenericFeatureProcessors.HalfPhoneLeftRight());
		addFeatureProcessor(new MaryGenericFeatureProcessors.Accented("accented", syllable));
		addFeatureProcessor(new MaryGenericFeatureProcessors.Stressed("stressed", syllable));
		addFeatureProcessor(new MaryGenericFeatureProcessors.Stressed("prev_stressed", prevSyllable));
		addFeatureProcessor(new MaryGenericFeatureProcessors.Stressed("next_stressed", nextSyllable));
		addFeatureProcessor(new MaryGenericFeatureProcessors.WordNumSyls());
		addFeatureProcessor(new MaryGenericFeatureProcessors.PosInSyl());
		addFeatureProcessor(new MaryGenericFeatureProcessors.SylBreak("syl_break", syllable));
		addFeatureProcessor(new MaryGenericFeatureProcessors.SylBreak("prev_syl_break", prevSyllable));
		addFeatureProcessor(new MaryGenericFeatureProcessors.PositionType());
		addFeatureProcessor(new MaryGenericFeatureProcessors.BreakIndex());
		addFeatureProcessor(new MaryGenericFeatureProcessors.IsPause("prev_is_pause", prevSegment));
		addFeatureProcessor(new MaryGenericFeatureProcessors.IsPause("next_is_pause", nextSegment));
		addFeatureProcessor(new MaryGenericFeatureProcessors.TobiAccent("tobi_accent", syllable));
		addFeatureProcessor(new MaryGenericFeatureProcessors.TobiAccent("next_tobi_accent", nextSyllable));
		addFeatureProcessor(new MaryGenericFeatureProcessors.TobiAccent("nextnext_tobi_accent", nextNextSyllable));
		addFeatureProcessor(new MaryGenericFeatureProcessors.TobiEndtone("tobi_endtone", syllable));
		addFeatureProcessor(new MaryGenericFeatureProcessors.TobiEndtone("next_tobi_endtone", nextSyllable));
		addFeatureProcessor(new MaryGenericFeatureProcessors.TobiEndtone("nextnext_tobi_endtone", nextNextSyllable));
		addFeatureProcessor(new MaryGenericFeatureProcessors.WordPunc("sentence_punc", lastWord));
		addFeatureProcessor(new MaryGenericFeatureProcessors.SylsFromPhraseStart());
		addFeatureProcessor(new MaryGenericFeatureProcessors.SylsFromPhraseEnd());
		addFeatureProcessor(new MaryGenericFeatureProcessors.StressedSylsFromPhraseStart());
		addFeatureProcessor(new MaryGenericFeatureProcessors.StressedSylsFromPhraseEnd());
		addFeatureProcessor(new MaryGenericFeatureProcessors.AccentedSylsFromPhraseStart());
		addFeatureProcessor(new MaryGenericFeatureProcessors.AccentedSylsFromPhraseEnd());
		addFeatureProcessor(new MaryGenericFeatureProcessors.SylsFromPrevStressed());
		addFeatureProcessor(new MaryGenericFeatureProcessors.SylsToNextStressed());
		addFeatureProcessor(new MaryGenericFeatureProcessors.SylsFromPrevAccent());
		addFeatureProcessor(new MaryGenericFeatureProcessors.SylsToNextAccent());
		addFeatureProcessor(new MaryGenericFeatureProcessors.WordNumSegs());
		addFeatureProcessor(new MaryGenericFeatureProcessors.SegsFromSylStart());
		addFeatureProcessor(new MaryGenericFeatureProcessors.SegsFromSylEnd());
		addFeatureProcessor(new MaryGenericFeatureProcessors.SylNumSegs());
		addFeatureProcessor(new MaryGenericFeatureProcessors.SentenceNumPhrases());
		addFeatureProcessor(new MaryGenericFeatureProcessors.SentenceNumWords());
		addFeatureProcessor(new MaryGenericFeatureProcessors.PhraseNumWords());
		addFeatureProcessor(new MaryGenericFeatureProcessors.PhraseNumSyls());
		addFeatureProcessor(new MaryGenericFeatureProcessors.SegsFromWordStart());
		addFeatureProcessor(new MaryGenericFeatureProcessors.SegsFromWordEnd());
		addFeatureProcessor(new MaryGenericFeatureProcessors.SylsFromWordStart());
		addFeatureProcessor(new MaryGenericFeatureProcessors.SylsFromWordEnd());
		addFeatureProcessor(new MaryGenericFeatureProcessors.WordsFromPhraseStart());
		addFeatureProcessor(new MaryGenericFeatureProcessors.WordsFromPhraseEnd());
		addFeatureProcessor(new MaryGenericFeatureProcessors.WordsFromSentenceStart());
		addFeatureProcessor(new MaryGenericFeatureProcessors.WordsFromSentenceEnd());
		addFeatureProcessor(new MaryGenericFeatureProcessors.PhrasesFromSentenceStart());
		addFeatureProcessor(new MaryGenericFeatureProcessors.PhrasesFromSentenceEnd());
		addFeatureProcessor(new MaryGenericFeatureProcessors.NextAccent());
		addFeatureProcessor(new MaryGenericFeatureProcessors.PrevAccent());
		addFeatureProcessor(new MaryGenericFeatureProcessors.PhraseEndtone());
		addFeatureProcessor(new MaryGenericFeatureProcessors.PrevPhraseEndtone());
		addFeatureProcessor(new MaryGenericFeatureProcessors.PrevPunctuation());
		addFeatureProcessor(new MaryGenericFeatureProcessors.NextPunctuation());
		addFeatureProcessor(new MaryGenericFeatureProcessors.WordsFromPrevPunctuation());
		addFeatureProcessor(new MaryGenericFeatureProcessors.WordsToNextPunctuation());
		addFeatureProcessor(new MaryGenericFeatureProcessors.Selection_Prosody(syllable));
		addFeatureProcessor(new MaryGenericFeatureProcessors.Style());

		addFeatureProcessor(new MaryGenericFeatureProcessors.UnitDuration());
		addFeatureProcessor(new MaryGenericFeatureProcessors.UnitLogF0());
		addFeatureProcessor(new MaryGenericFeatureProcessors.UnitLogF0Delta());
	}
	
	
	
	
	
	
	package hmi.data;

import marytts.datatypes.MaryXML;
import marytts.features.MaryGenericFeatureProcessors.TargetElementNavigator;
import marytts.unitselection.select.Target;

import org.w3c.dom.Element;
import org.w3c.dom.traversal.TreeWalker;
public class SoCalledNavigators {

	 /* Navigate from a target to an item. Classes implementing this interface will retrieve meaningful items given the target.
	 * 
	 * @author Marc Schr&ouml;der
	 */
	//why marc, why?
//	public static interface TargetElementNavigator {
//		/**
//		 * Given the target, retrieve an XML Element.
//		 * 
//		 * @param target
//		 * @return an item selected according to this navigator, or null if there is no such item.
//		 */
//		public Element getElement(Target target);
//	}

	/**
	 * Retrieve the segment belonging to this target.
	 * 
	 * @author Marc Schr&ouml;der
	 *
	 */
//	public static class SegmentNavigator implements TargetElementNavigator {
//		public Element getElement(Target target) {
//			return target.getMaryxmlElement();
//		}
//	}

	/**
	 * Retrieve the segment preceding the segment which belongs to this target.
	 * 
	 * @author Marc Schr&ouml;der
	 *
	 */
	public static class PrevSegmentNavigator implements TargetElementNavigator {
		public Element getElement(Target target) {
			Element segment = target.getMaryxmlElement();
			if (segment == null)
				return null;
			Element sentence = (Element) MaryDomUtils.getAncestor(segment, MaryXML.SENTENCE);
			if (sentence == null)
				return null;
			TreeWalker tw = MaryDomUtils.createTreeWalker(sentence, MaryXML.PHONE, MaryXML.BOUNDARY);
			tw.setCurrentNode(segment);
			Element previous = (Element) tw.previousNode();
			return previous;
		}
	}

	/**
	 * Retrieve the segment two before the segment which belongs to this target.
	 * 
	 * @author Marc Schr&ouml;der
	 *
	 */
	public static class PrevPrevSegmentNavigator implements TargetElementNavigator {
		public Element getElement(Target target) {
			Element segment = target.getMaryxmlElement();
			if (segment == null)
				return null;
			Element sentence = (Element) MaryDomUtils.getAncestor(segment, MaryXML.SENTENCE);
			if (sentence == null)
				return null;
			TreeWalker tw = MaryDomUtils.createTreeWalker(sentence, MaryXML.PHONE, MaryXML.BOUNDARY);
			tw.setCurrentNode(segment);
			Element previous = (Element) tw.previousNode();
			Element pp = (Element) tw.previousNode();
			return pp;
		}
	}

	/**
	 * Retrieve the segment following the segment which belongs to this target.
	 * 
	 * @author Marc Schr&ouml;der
	 *
	 */
	public static class NextSegmentNavigator implements TargetElementNavigator {
		public Element getElement(Target target) {
			Element segment = target.getMaryxmlElement();
			if (segment == null)
				return null;
			Element sentence = (Element) MaryDomUtils.getAncestor(segment, MaryXML.SENTENCE);
			if (sentence == null)
				return null;
			TreeWalker tw = MaryDomUtils.createTreeWalker(sentence, MaryXML.PHONE, MaryXML.BOUNDARY);
			tw.setCurrentNode(segment);
			Element next = (Element) tw.nextNode();
			return next;
		}
	}

	/**
	 * Retrieve the segment two after the segment which belongs to this target.
	 * 
	 * @author Marc Schr&ouml;der
	 *
	 */
	public static class NextNextSegmentNavigator implements TargetElementNavigator {
		public Element getElement(Target target) {
			Element segment = target.getMaryxmlElement();
			if (segment == null)
				return null;
			Element sentence = (Element) MaryDomUtils.getAncestor(segment, MaryXML.SENTENCE);
			if (sentence == null)
				return null;
			TreeWalker tw = MaryDomUtils.createTreeWalker(sentence, MaryXML.PHONE, MaryXML.BOUNDARY);
			tw.setCurrentNode(segment);
			Element next = (Element) tw.nextNode();
			Element nn = (Element) tw.nextNode();
			return nn;
		}
	}

	/**
	 * Retrieve the first segment in the word to which this target belongs.
	 *
	 */
	public static class FirstSegmentInWordNavigator implements TargetElementNavigator {
		public Element getElement(Target target) {
			Element segment = target.getMaryxmlElement();
			if (segment == null)
				return null;
			Element word = (Element) MaryDomUtils.getAncestor(segment, MaryXML.TOKEN);
			if (word == null)
				return null;
			TreeWalker tw = MaryDomUtils.createTreeWalker(word, MaryXML.PHONE);
			Element first = (Element) tw.firstChild();
			if (first != null) {
				assert first.getTagName().equals(MaryXML.PHONE) : "Unexpected tag name: expected " + MaryXML.PHONE + ", got "
						+ first.getTagName();
			}
			return first;
		}
	}

	/**
	 * Retrieve the last segment in the word to which this target belongs.
	 *
	 */
	public static class LastSegmentInWordNavigator implements TargetElementNavigator {
		public Element getElement(Target target) {
			Element segment = target.getMaryxmlElement();
			if (segment == null)
				return null;
			Element word = (Element) MaryDomUtils.getAncestor(segment, MaryXML.TOKEN);
			if (word == null)
				return null;
			TreeWalker tw = MaryDomUtils.createTreeWalker(word, MaryXML.PHONE);
			Element last = (Element) tw.lastChild();
			if (last != null) {
				assert last.getTagName().equals(MaryXML.PHONE) : "Unexpected tag name: expected " + MaryXML.PHONE + ", got "
						+ last.getTagName();
			}
			return last;
		}
	}

	/**
	 * Retrieve the first syllable in the word to which this target belongs.
	 *
	 */
	public static class FirstSyllableInWordNavigator implements TargetElementNavigator {
		public Element getElement(Target target) {
			Element segment = target.getMaryxmlElement();
			if (segment == null)
				return null;
			Element word = (Element) MaryDomUtils.getAncestor(segment, MaryXML.TOKEN);
			if (word == null)
				return null;
			TreeWalker tw = MaryDomUtils.createTreeWalker(word, MaryXML.SYLLABLE);
			Element first = (Element) tw.firstChild();
			if (first != null) {
				assert first.getTagName().equals(MaryXML.SYLLABLE) : "Unexpected tag name: expected " + MaryXML.SYLLABLE
						+ ", got " + first.getTagName();
			}
			return first;
		}
	}

	/**
	 * Retrieve the last syllable in the word to which this target belongs.
	 *
	 */
	public static class LastSyllableInWordNavigator implements TargetElementNavigator {
		public Element getElement(Target target) {
			Element segment = target.getMaryxmlElement();
			if (segment == null)
				return null;
			Element word = (Element) MaryDomUtils.getAncestor(segment, MaryXML.TOKEN);
			if (word == null)
				return null;
			TreeWalker tw = MaryDomUtils.createTreeWalker(word, MaryXML.SYLLABLE);
			Element last = (Element) tw.lastChild();
			if (last != null) {
				assert last.getTagName().equals(MaryXML.SYLLABLE) : "Unexpected tag name: expected " + MaryXML.SYLLABLE
						+ ", got " + last.getTagName();
			}
			return last;
		}
	}

	/**
	 * Retrieve the syllable belonging to this target.
	 * 
	 * @author Marc Schr&ouml;der
	 *
	 */
	public static class SyllableNavigator implements TargetElementNavigator {
		public Element getElement(Target target) {
			Element segment = target.getMaryxmlElement();
			if (segment == null)
				return null;
			if (!segment.getTagName().equals(MaryXML.PHONE))
				return null;
			Element syllable = (Element) segment.getParentNode();
			if (syllable != null) {
				assert syllable.getTagName().equals(MaryXML.SYLLABLE) : "Unexpected tag name: expected " + MaryXML.SYLLABLE
						+ ", got " + syllable.getTagName();
			}
			return syllable;
		}
	}

	/**
	 * Retrieve the syllable before the syllable belonging to this target.
	 * 
	 * @author Marc Schr&ouml;der
	 *
	 */
	public static class PrevSyllableNavigator implements TargetElementNavigator {
		public Element getElement(Target target) {
			Element segment = target.getMaryxmlElement();
			if (segment == null)
				return null;
			Element current;
			if (segment.getTagName().equals(MaryXML.PHONE)) {
				Element syllable = (Element) segment.getParentNode();
				if (syllable == null)
					return null;
				current = syllable;
			} else { // boundary
				current = segment;
			}
			Element sentence = (Element) MaryDomUtils.getAncestor(segment, MaryXML.SENTENCE);
			if (sentence == null)
				return null;
			TreeWalker tw = MaryDomUtils.createTreeWalker(sentence, MaryXML.SYLLABLE);
			tw.setCurrentNode(current);
			Element previous = (Element) tw.previousNode();
			if (previous != null) {
				assert previous.getTagName().equals(MaryXML.SYLLABLE) : "Unexpected tag name: expected " + MaryXML.SYLLABLE
						+ ", got " + previous.getTagName();
			}
			return previous;
		}
	}

	/**
	 * Retrieve the syllable two before the syllable belonging to this target.
	 * 
	 * @author Marc Schr&ouml;der
	 *
	 */
	public static class PrevPrevSyllableNavigator implements TargetElementNavigator {
		public Element getElement(Target target) {
			Element segment = target.getMaryxmlElement();
			if (segment == null)
				return null;
			Element current;
			if (segment.getTagName().equals(MaryXML.PHONE)) {
				Element syllable = (Element) segment.getParentNode();
				if (syllable == null)
					return null;
				current = syllable;
			} else { // boundary
				current = segment;
			}
			Element sentence = (Element) MaryDomUtils.getAncestor(segment, MaryXML.SENTENCE);
			if (sentence == null)
				return null;
			TreeWalker tw = MaryDomUtils.createTreeWalker(sentence, MaryXML.SYLLABLE);
			tw.setCurrentNode(current);
			Element previous = (Element) tw.previousNode();
			Element pp = (Element) tw.previousNode();
			if (pp != null) {
				assert pp.getTagName().equals(MaryXML.SYLLABLE) : "Unexpected tag name: expected " + MaryXML.SYLLABLE + ", got "
						+ pp.getTagName();
			}
			return pp;
		}
	}

	/**
	 * Retrieve the syllable following the syllable belonging to this target.
	 * 
	 * @author Marc Schr&ouml;der
	 *
	 */
	public static class NextSyllableNavigator implements TargetElementNavigator {
		public Element getElement(Target target) {
			Element segment = target.getMaryxmlElement();
			if (segment == null)
				return null;
			Element current;
			if (segment.getTagName().equals(MaryXML.PHONE)) {
				Element syllable = (Element) segment.getParentNode();
				if (syllable == null)
					return null;
				current = syllable;
			} else { // boundary
				current = segment;
			}
			Element sentence = (Element) MaryDomUtils.getAncestor(segment, MaryXML.SENTENCE);
			if (sentence == null)
				return null;
			TreeWalker tw = MaryDomUtils.createTreeWalker(sentence, MaryXML.SYLLABLE);
			tw.setCurrentNode(current);
			Element next = (Element) tw.nextNode();
			if (next != null) {
				assert next.getTagName().equals(MaryXML.SYLLABLE) : "Unexpected tag name: expected " + MaryXML.SYLLABLE
						+ ", got " + next.getTagName();
			}
			return next;
		}
	}

	/**
	 * Retrieve the syllable two after the syllable belonging to this target.
	 * 
	 * @author Marc Schr&ouml;der
	 *
	 */
	public static class NextNextSyllableNavigator implements TargetElementNavigator {
		public Element getElement(Target target) {
			Element segment = target.getMaryxmlElement();
			if (segment == null)
				return null;
			Element current;
			if (segment.getTagName().equals(MaryXML.PHONE)) {
				Element syllable = (Element) segment.getParentNode();
				if (syllable == null)
					return null;
				current = syllable;
			} else { // boundary
				current = segment;
			}
			Element sentence = (Element) MaryDomUtils.getAncestor(segment, MaryXML.SENTENCE);
			if (sentence == null)
				return null;
			TreeWalker tw = MaryDomUtils.createTreeWalker(sentence, MaryXML.SYLLABLE);
			tw.setCurrentNode(current);
			Element next = (Element) tw.nextNode();
			Element nn = (Element) tw.nextNode();
			if (nn != null) {
				assert nn.getTagName().equals(MaryXML.SYLLABLE) : "Unexpected tag name: expected " + MaryXML.SYLLABLE + ", got "
						+ nn.getTagName();
			}
			return nn;
		}
	}

	/**
	 * Retrieve the word belonging to this target.
	 * 
	 * @author Marc Schr&ouml;der
	 *
	 */
	public static class WordNavigator implements TargetElementNavigator {
		public Element getElement(Target target) {
			Element segment = target.getMaryxmlElement();
			if (segment == null)
				return null;
			Element word = (Element) MaryDomUtils.getAncestor(segment, MaryXML.TOKEN);
			if (word != null) {
				assert word.getTagName().equals(MaryXML.TOKEN) : "Unexpected tag name: expected " + MaryXML.TOKEN + ", got "
						+ word.getTagName();
			}
			return word;
		}
	}

	/** Last syllable in phrase. */
	public static class LastSyllableInPhraseNavigator implements TargetElementNavigator {
		public Element getElement(Target target) {
			Element segment = target.getMaryxmlElement();
			if (segment == null)
				return null;
			Element phrase = (Element) MaryDomUtils.getAncestor(segment, MaryXML.PHRASE);
			if (phrase == null)
				return null;
			TreeWalker tw = MaryDomUtils.createTreeWalker(phrase, MaryXML.SYLLABLE);
			Element last = (Element) tw.lastChild();
			if (last != null) {
				assert last.getTagName().equals(MaryXML.SYLLABLE) : "Unexpected tag name: expected " + MaryXML.SYLLABLE
						+ ", got " + last.getTagName();
			}
			return last;
		}
	}

	public static class NextWordNavigator implements TargetElementNavigator {
		public Element getElement(Target target) {
			Element segment = target.getMaryxmlElement();
			if (segment == null)
				return null;
			Element current;
			if (segment.getTagName().equals(MaryXML.PHONE)) {
				Element word = (Element) MaryDomUtils.getAncestor(segment, MaryXML.TOKEN);
				if (word == null)
					return null;
				current = word;
			} else { // boundary
				current = segment;
			}
			Element sentence = (Element) MaryDomUtils.getAncestor(segment, MaryXML.SENTENCE);
			if (sentence == null)
				return null;
			TreeWalker tw = MaryDomUtils.createTreeWalker(sentence, MaryXML.TOKEN);
			tw.setCurrentNode(current);
			// The next word is the next token with a "ph" attribute:
			Element nextWord = null;
			Element nextToken;
			while ((nextToken = (Element) tw.nextNode()) != null) {
				if (nextToken.hasAttribute("ph")) {
					nextWord = nextToken;
					break;
				}
			}
			if (nextWord != null) {
				assert nextWord.getTagName().equals(MaryXML.TOKEN) : "Unexpected tag name: expected " + MaryXML.TOKEN + ", got "
						+ nextWord.getTagName();
			}
			return nextWord;
		}
	}

	public static class PrevWordNavigator implements TargetElementNavigator {
		public Element getElement(Target target) {
			Element segment = target.getMaryxmlElement();
			if (segment == null)
				return null;
			Element current;
			if (segment.getTagName().equals(MaryXML.PHONE)) {
				Element word = (Element) MaryDomUtils.getAncestor(segment, MaryXML.TOKEN);
				if (word == null)
					return null;
				current = word;
			} else { // boundary
				current = segment;
			}
			Element sentence = (Element) MaryDomUtils.getAncestor(segment, MaryXML.SENTENCE);
			if (sentence == null)
				return null;
			TreeWalker tw = MaryDomUtils.createTreeWalker(sentence, MaryXML.TOKEN);
			tw.setCurrentNode(current);
			// The next word is the next token with a "ph" attribute:
			Element prevWord = null;
			Element prevToken;
			while ((prevToken = (Element) tw.previousNode()) != null) {
				if (prevToken.hasAttribute("ph")) {
					prevWord = prevToken;
					break;
				}
			}
			if (prevWord != null) {
				assert prevWord.getTagName().equals(MaryXML.TOKEN) : "Unexpected tag name: expected " + MaryXML.TOKEN + ", got "
						+ prevWord.getTagName();
			}
			return prevWord;
		}
	}

	public static class FirstSegmentNextWordNavigator implements TargetElementNavigator {
		public Element getElement(Target target) {
			Element segment = target.getMaryxmlElement();
			if (segment == null)
				return null;
			Element current;
			if (segment.getTagName().equals(MaryXML.PHONE)) {
				Element word = (Element) MaryDomUtils.getAncestor(segment, MaryXML.TOKEN);
				if (word == null)
					return null;
				current = word;
			} else { // boundary
				current = segment;
			}
			Element sentence = (Element) MaryDomUtils.getAncestor(segment, MaryXML.SENTENCE);
			if (sentence == null)
				return null;
			TreeWalker tw = MaryDomUtils.createTreeWalker(sentence, MaryXML.TOKEN);
			tw.setCurrentNode(current);
			// The next word is the next token with a "ph" attribute:
			Element nextWord = null;
			Element nextToken;
			while ((nextToken = (Element) tw.nextNode()) != null) {
				if (nextToken.hasAttribute("ph")) {
					nextWord = nextToken;
					break;
				}
			}
			if (nextWord == null) {
				return null;
			}
			assert nextWord.getTagName().equals(MaryXML.TOKEN) : "Unexpected tag name: expected " + MaryXML.TOKEN + ", got "
					+ nextWord.getTagName();
			TreeWalker sw = MaryDomUtils.createTreeWalker(nextWord, MaryXML.PHONE);
			Element first = (Element) sw.firstChild();
			if (first != null) {
				assert first.getTagName().equals(MaryXML.PHONE) : "Unexpected tag name: expected " + MaryXML.PHONE + ", got "
						+ first.getTagName();
			}
			return first;
		}
	}

	public static class LastWordInSentenceNavigator implements TargetElementNavigator {
		public Element getElement(Target target) {
			Element segment = target.getMaryxmlElement();
			if (segment == null)
				return null;
			Element sentence = (Element) MaryDomUtils.getAncestor(segment, MaryXML.SENTENCE);
			if (sentence == null)
				return null;
			TreeWalker tw = MaryDomUtils.createTreeWalker(sentence, MaryXML.TOKEN);
			Element lastWord = null;
			Element lastToken = (Element) tw.lastChild();
			// The last word is the lastToken which has a "ph" attribute:
			while (lastToken != null) {
				if (lastToken.hasAttribute("ph")) {
					lastWord = lastToken;
					break;
				}
				lastToken = (Element) tw.previousNode();
			}

			if (lastWord != null) {
				assert lastWord.getTagName().equals(MaryXML.TOKEN) : "Unexpected tag name: expected " + MaryXML.TOKEN + ", got "
						+ lastWord.getTagName();
			}
			return lastWord;
		}
	}

}
	
